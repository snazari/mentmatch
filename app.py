import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import os

st.set_page_config(page_title="MentMatch Visualizer", layout="wide")

# --- Constants ---
DEFAULT_MATCHES_FILE = 'mentor_mentee_matches_20250403.xlsx'  # Default file path

# --- Title and Description ---
st.title("MentMatch Visualizer")
st.markdown("""
This application helps you visualize and explore mentor-mentee matches generated by the MentMatch algorithm.
Upload your matches file to get started.
""")

# --- File Upload ---
uploaded_file = st.file_uploader("Upload matches file (Excel format)", type=["xlsx", "xls"])

# Check for local file if no upload
matches_df = None
if uploaded_file is not None:
    matches_df = pd.read_excel(uploaded_file)
    st.success(f"Successfully loaded match data with {len(matches_df)} mentee records")
elif os.path.exists(DEFAULT_MATCHES_FILE):
    st.info(f"Using local matches file: {DEFAULT_MATCHES_FILE}")
    matches_df = pd.read_excel(DEFAULT_MATCHES_FILE)
else:
    st.warning("Please upload a matches file to continue")
    st.stop()

# --- Process Data ---
if matches_df is not None:
    # Extract column names to identify how many matches per mentee
    match_cols = [col for col in matches_df.columns if 'match_' in col and 'mentor_id' in col]
    num_matches = len(match_cols)
    
    # Create tabs for different visualizations
    tab1, tab2, tab3 = st.tabs(["Match Overview", "Detailed Matches", "Network Analysis"])
    
    with tab1:
        st.header("Match Overview")
        
        # Create a summary of match scores
        match_data = []
        for i in range(1, num_matches + 1):
            score_col = f"match_{i}_score"
            if score_col in matches_df.columns:
                match_data.append({
                    "Match Number": f"Match {i}",
                    "Average Score": matches_df[score_col].mean(),
                    "Min Score": matches_df[score_col].min(),
                    "Max Score": matches_df[score_col].max()
                })
        
        if match_data:
            match_summary = pd.DataFrame(match_data)
            
            # Create bar chart of average scores
            fig = px.bar(match_summary, x="Match Number", y="Average Score",
                         error_y=match_summary["Max Score"]-match_summary["Average Score"],
                         error_y_minus=match_summary["Average Score"]-match_summary["Min Score"],
                         title="Match Quality by Preference Order",
                         height=400)
            st.plotly_chart(fig, use_container_width=True)
            
            # Display summary table
            st.dataframe(match_summary, use_container_width=True)
        
        # Distribution of semantic similarity scores
        st.subheader("Distribution of Semantic Similarity Scores")
        
        similarity_data = []
        for i in range(1, num_matches + 1):
            sim_col = f"match_{i}_semantic_similarity"
            if sim_col in matches_df.columns:
                match_scores = matches_df[sim_col].dropna()
                for score in match_scores:
                    similarity_data.append({
                        "Match Number": f"Match {i}",
                        "Semantic Similarity": score
                    })
        
        if similarity_data:
            similarity_df = pd.DataFrame(similarity_data)
            fig = px.histogram(similarity_df, x="Semantic Similarity", color="Match Number",
                              marginal="box", opacity=0.7, nbins=20,
                              title="Distribution of Semantic Similarity Scores",
                              height=500)
            st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.header("Detailed Matches")
        
        # Mentee selector
        mentee_names = matches_df["mentee_name"].tolist()
        selected_mentee = st.selectbox("Select Mentee", mentee_names)
        
        # Display matches for selected mentee
        if selected_mentee:
            mentee_row = matches_df[matches_df["mentee_name"] == selected_mentee].iloc[0]
            mentee_id = mentee_row["mentee_id"]
            
            st.subheader(f"Matches for {selected_mentee} (ID: {mentee_id})")
            
            # Create table of matches
            matches_table_data = []
            for i in range(1, num_matches + 1):
                mentor_name_col = f"match_{i}_mentor_name"
                mentor_id_col = f"match_{i}_mentor_id"
                score_col = f"match_{i}_score"
                sim_col = f"match_{i}_semantic_similarity"
                summary_col = f"match_{i}_summary"
                
                if all(col in mentee_row.index for col in [mentor_name_col, score_col, sim_col, summary_col]):
                    matches_table_data.append({
                        "Rank": i,
                        "Mentor Name": mentee_row[mentor_name_col],
                        "Mentor ID": mentee_row[mentor_id_col] if mentor_id_col in mentee_row.index else "N/A",
                        "Match Score": mentee_row[score_col],
                        "Semantic Similarity": mentee_row[sim_col],
                        "Match Summary": mentee_row[summary_col] if summary_col in mentee_row.index else ""
                    })
            
            if matches_table_data:
                matches_table = pd.DataFrame(matches_table_data)
                st.dataframe(matches_table, use_container_width=True)
                
                # Bar chart of match scores
                fig = px.bar(matches_table, x="Rank", y=["Match Score", "Semantic Similarity"],
                             barmode="group", height=400,
                             title=f"Match Scores for {selected_mentee}")
                st.plotly_chart(fig, use_container_width=True)
                
                # Display match summaries in expanders
                st.subheader("Match Details")
                for i, match in enumerate(matches_table_data):
                    with st.expander(f"Match {i+1}: {match['Mentor Name']} (Score: {match['Match Score']:.4f})"):
                        st.write(f"**Mentor ID:** {match['Mentor ID']}")
                        st.write(f"**Match Score:** {match['Match Score']:.4f}")
                        st.write(f"**Semantic Similarity:** {match['Semantic Similarity']:.4f}")
                        st.write("**Match Summary:**")
                        
                        # Split the summary by semicolons for better readability
                        summary_points = match['Match Summary'].split(';')
                        for point in summary_points:
                            if point.strip():
                                st.write(f"- {point.strip()}")
    
    with tab3:
        st.header("Network Analysis")
        
        # Extract unique mentors from all matches
        all_mentors = set()
        for i in range(1, num_matches + 1):
            mentor_col = f"match_{i}_mentor_name"
            if mentor_col in matches_df.columns:
                mentors = matches_df[mentor_col].dropna().unique()
                all_mentors.update(mentors)
        
        st.subheader("Mentor Match Frequency")
        
        # Count how many times each mentor appears in the top matches
        mentor_counts = {}
        for mentor in all_mentors:
            count = 0
            for i in range(1, num_matches + 1):
                mentor_col = f"match_{i}_mentor_name"
                if mentor_col in matches_df.columns:
                    count += (matches_df[mentor_col] == mentor).sum()
            mentor_counts[mentor] = count
        
        # Create a dataframe and sort by count
        mentor_freq = pd.DataFrame({
            "Mentor Name": list(mentor_counts.keys()),
            "Match Count": list(mentor_counts.values())
        })
        mentor_freq = mentor_freq.sort_values("Match Count", ascending=False)
        
        # Display as horizontal bar chart for better readability with many mentors
        if len(mentor_freq) > 0:
            fig = px.bar(mentor_freq.head(20), y="Mentor Name", x="Match Count", 
                         orientation='h', height=600,
                         title="Top 20 Mentors by Match Frequency")
            fig.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig, use_container_width=True)
            
            # Display full table
            st.dataframe(mentor_freq, use_container_width=True)
            
            # Network diagram option for smaller datasets
            if len(matches_df) <= 50:  # Only show for smaller datasets to avoid cluttered viz
                st.subheader("Mentor-Mentee Network")
                
                # Create network data
                edge_data = []
                for _, row in matches_df.iterrows():
                    mentee_name = row["mentee_name"]
                    for i in range(1, num_matches + 1):
                        mentor_col = f"match_{i}_mentor_name"
                        score_col = f"match_{i}_score"
                        
                        if mentor_col in row and score_col in row and pd.notna(row[mentor_col]):
                            edge_data.append({
                                "source": mentee_name,
                                "target": row[mentor_col],
                                "weight": row[score_col],
                                "rank": i
                            })
                
                # Using NetworkX and Plotly for visualization
                if edge_data:
                    import networkx as nx
                    from pyvis.network import Network
                    
                    G = nx.Graph()
                    
                    # Add edges with weight attribute
                    for edge in edge_data:
                        G.add_edge(edge["source"], edge["target"], 
                                  weight=edge["weight"], 
                                  rank=edge["rank"])
                    
                    # Use Pyvis to create an interactive network visualization
                    net = Network(notebook=False, height="600px", width="100%", 
                                  bgcolor="#222222", font_color="white")
                    
                    # Add nodes with different colors for mentors and mentees
                    for node in G.nodes():
                        if node in mentee_names:
                            net.add_node(node, label=node, color="#FF9999", size=15)
                        else:
                            net.add_node(node, label=node, color="#99CCFF", size=20)
                    
                    # Add edges
                    for edge in edge_data:
                        # Adjust edge width based on score, thicker = higher score
                        width = max(1, min(10, edge["weight"] * 10))
                        net.add_edge(edge["source"], edge["target"], 
                                    width=width, title=f"Score: {edge['weight']:.4f}")
                    
                    # Save and display network
                    net.save_graph("mentor_mentee_network.html")
                    
                    with open("mentor_mentee_network.html", "r") as f:
                        network_html = f.read()
                    
                    st.components.v1.html(network_html, height=600)
                    
                    # Download button for the network visualization
                    with open("mentor_mentee_network.html", "rb") as file:
                        btn = st.download_button(
                            label="Download Network Visualization",
                            data=file,
                            file_name="mentor_mentee_network.html",
                            mime="text/html"
                        ) 